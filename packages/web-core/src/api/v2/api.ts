/* tslint:disable */
/* eslint-disable */
/**
 * Corbado Frontend API
 * Overview of all Corbado Frontend API calls to implement passwordless authentication.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export const AuthType = {
    Signup: 'signup',
    Login: 'login'
} as const;

export type AuthType = typeof AuthType[keyof typeof AuthType];


/**
 * 
 * @export
 * @interface AuthenticationResponse
 */
export interface AuthenticationResponse {
    /**
     * Only given when project environment is dev
     * @type {string}
     * @memberof AuthenticationResponse
     */
    'longSession'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticationResponse
     */
    'shortSession': string;
}
/**
 * 
 * @export
 * @interface BlockBody
 */
export interface BlockBody {
    /**
     * 
     * @type {BlockType}
     * @memberof BlockBody
     */
    'block': BlockType;
    /**
     * 
     * @type {AuthType}
     * @memberof BlockBody
     */
    'authType': AuthType;
    /**
     * 
     * @type {BlockBodyData}
     * @memberof BlockBody
     */
    'data': BlockBodyData;
    /**
     * 
     * @type {Array<BlockBody>}
     * @memberof BlockBody
     */
    'alternatives'?: Array<BlockBody>;
    /**
     * 
     * @type {RequestError}
     * @memberof BlockBody
     */
    'error'?: RequestError;
    /**
     * 
     * @type {ContinueOnOtherDevice}
     * @memberof BlockBody
     */
    'continueOnOtherDevice'?: ContinueOnOtherDevice;
}


/**
 * 
 * @export
 * @interface BlockBodyData
 */
export interface BlockBodyData {
    /**
     * 
     * @type {string}
     * @memberof BlockBodyData
     */
    'challenge': string;
    /**
     * 
     * @type {string}
     * @memberof BlockBodyData
     */
    'identifierValue': string;
    /**
     * 
     * @type {LoginIdentifierType}
     * @memberof BlockBodyData
     */
    'identifierType': LoginIdentifierType;
    /**
     * 
     * @type {VerificationMethod}
     * @memberof BlockBodyData
     */
    'verificationMethod': VerificationMethod;
    /**
     * 
     * @type {string}
     * @memberof BlockBodyData
     */
    'identifier': string;
    /**
     * 
     * @type {number}
     * @memberof BlockBodyData
     */
    'retryNotBefore'?: number;
    /**
     * 
     * @type {RequestError}
     * @memberof BlockBodyData
     */
    'error'?: RequestError;
    /**
     * 
     * @type {Array<object>}
     * @memberof BlockBodyData
     */
    'alternativeVerificationMethods': Array<object>;
    /**
     * Only given when project environment is dev
     * @type {string}
     * @memberof BlockBodyData
     */
    'longSession'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockBodyData
     */
    'shortSession': string;
    /**
     * 
     * @type {Array<LoginIdentifierWithError>}
     * @memberof BlockBodyData
     */
    'identifiers': Array<LoginIdentifierWithError>;
    /**
     * 
     * @type {FullNameWithError}
     * @memberof BlockBodyData
     */
    'fullName'?: FullNameWithError;
    /**
     * 
     * @type {LoginIdentifierType}
     * @memberof BlockBodyData
     */
    'type': LoginIdentifierType;
    /**
     * 
     * @type {string}
     * @memberof BlockBodyData
     */
    'conditionalUIChallenge'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BlockBodyData
     */
    'isPhone': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BlockBodyData
     */
    'isPhoneAvailable': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BlockBodyData
     */
    'isEmailAvailable': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BlockBodyData
     */
    'isUsernameAvailable': boolean;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const BlockType = {
    SignupInit: 'signup-init',
    PasskeyAppend: 'passkey-append',
    PhoneVerify: 'phone-verify',
    EmailVerify: 'email-verify',
    PasskeyAppended: 'passkey-appended',
    Completed: 'completed',
    SocialVerify: 'social-verify',
    UsernameCollect: 'username-collect',
    PhoneCollect: 'phone-collect',
    LoginInit: 'login-init',
    PasskeyVerify: 'passkey-verify',
    ConditionalUiCompleted: 'conditional-ui-completed'
} as const;

export type BlockType = typeof BlockType[keyof typeof BlockType];


/**
 * 
 * @export
 * @interface ClientInformation
 */
export interface ClientInformation {
    /**
     * 
     * @type {boolean}
     * @memberof ClientInformation
     */
    'bluetoothAvailable': boolean;
    /**
     * 
     * @type {string}
     * @memberof ClientInformation
     */
    'clientEnvHandle'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ClientInformation
     */
    'canUsePasskeys': boolean;
}
/**
 * 
 * @export
 * @interface ContinueOnOtherDevice
 */
export interface ContinueOnOtherDevice {
    /**
     * 
     * @type {string}
     * @memberof ContinueOnOtherDevice
     */
    'reason': ContinueOnOtherDeviceReasonEnum;
}

export const ContinueOnOtherDeviceReasonEnum = {
    EmailLinkVerified: 'email-link-verified',
    ProcessAlreadyCompleted: 'process-already-completed'
} as const;

export type ContinueOnOtherDeviceReasonEnum = typeof ContinueOnOtherDeviceReasonEnum[keyof typeof ContinueOnOtherDeviceReasonEnum];

/**
 * 
 * @export
 * @interface FullNameWithError
 */
export interface FullNameWithError {
    /**
     * 
     * @type {string}
     * @memberof FullNameWithError
     */
    'fullName': string;
    /**
     * 
     * @type {RequestError}
     * @memberof FullNameWithError
     */
    'error'?: RequestError;
}
/**
 * 
 * @export
 * @interface GeneralBlockLoginInit
 */
export interface GeneralBlockLoginInit {
    /**
     * 
     * @type {string}
     * @memberof GeneralBlockLoginInit
     */
    'conditionalUIChallenge'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneralBlockLoginInit
     */
    'identifierValue': string;
    /**
     * 
     * @type {boolean}
     * @memberof GeneralBlockLoginInit
     */
    'isPhone': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GeneralBlockLoginInit
     */
    'isPhoneAvailable': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GeneralBlockLoginInit
     */
    'isEmailAvailable': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GeneralBlockLoginInit
     */
    'isUsernameAvailable': boolean;
    /**
     * 
     * @type {RequestError}
     * @memberof GeneralBlockLoginInit
     */
    'error'?: RequestError;
}
/**
 * 
 * @export
 * @interface GeneralBlockPasskeyAppend
 */
export interface GeneralBlockPasskeyAppend {
    /**
     * 
     * @type {string}
     * @memberof GeneralBlockPasskeyAppend
     */
    'challenge': string;
    /**
     * 
     * @type {string}
     * @memberof GeneralBlockPasskeyAppend
     */
    'identifierValue': string;
    /**
     * 
     * @type {LoginIdentifierType}
     * @memberof GeneralBlockPasskeyAppend
     */
    'identifierType': LoginIdentifierType;
}


/**
 * 
 * @export
 * @interface GeneralBlockPasskeyVerify
 */
export interface GeneralBlockPasskeyVerify {
    /**
     * 
     * @type {string}
     * @memberof GeneralBlockPasskeyVerify
     */
    'challenge': string;
    /**
     * 
     * @type {string}
     * @memberof GeneralBlockPasskeyVerify
     */
    'identifierValue': string;
}
/**
 * 
 * @export
 * @interface GeneralBlockSignupInit
 */
export interface GeneralBlockSignupInit {
    /**
     * 
     * @type {Array<LoginIdentifierWithError>}
     * @memberof GeneralBlockSignupInit
     */
    'identifiers': Array<LoginIdentifierWithError>;
    /**
     * 
     * @type {FullNameWithError}
     * @memberof GeneralBlockSignupInit
     */
    'fullName'?: FullNameWithError;
}
/**
 * 
 * @export
 * @interface GeneralBlockVerifyIdentifier
 */
export interface GeneralBlockVerifyIdentifier {
    /**
     * 
     * @type {VerificationMethod}
     * @memberof GeneralBlockVerifyIdentifier
     */
    'verificationMethod': VerificationMethod;
    /**
     * 
     * @type {string}
     * @memberof GeneralBlockVerifyIdentifier
     */
    'identifier': string;
    /**
     * 
     * @type {number}
     * @memberof GeneralBlockVerifyIdentifier
     */
    'retryNotBefore'?: number;
    /**
     * 
     * @type {RequestError}
     * @memberof GeneralBlockVerifyIdentifier
     */
    'error'?: RequestError;
    /**
     * 
     * @type {Array<object>}
     * @memberof GeneralBlockVerifyIdentifier
     */
    'alternativeVerificationMethods': Array<object>;
}


/**
 * 
 * @export
 * @interface Identifier
 */
export interface Identifier {
    /**
     * 
     * @type {string}
     * @memberof Identifier
     */
    'value': string;
    /**
     * 
     * @type {LoginIdentifierType}
     * @memberof Identifier
     */
    'type': LoginIdentifierType;
    /**
     * 
     * @type {string}
     * @memberof Identifier
     */
    'status': string;
}


/**
 * 
 * @export
 * @interface IdentifierUpdateReq
 */
export interface IdentifierUpdateReq {
    /**
     * 
     * @type {LoginIdentifierType}
     * @memberof IdentifierUpdateReq
     */
    'identifierType': LoginIdentifierType;
    /**
     * 
     * @type {string}
     * @memberof IdentifierUpdateReq
     */
    'value': string;
}


/**
 * 
 * @export
 * @interface IdentifierVerifyFinishReq
 */
export interface IdentifierVerifyFinishReq {
    /**
     * 
     * @type {string}
     * @memberof IdentifierVerifyFinishReq
     */
    'code': string;
    /**
     * 
     * @type {LoginIdentifierType}
     * @memberof IdentifierVerifyFinishReq
     */
    'identifierType': LoginIdentifierType;
    /**
     * 
     * @type {VerificationMethod}
     * @memberof IdentifierVerifyFinishReq
     */
    'verificationType': VerificationMethod;
    /**
     * 
     * @type {boolean}
     * @memberof IdentifierVerifyFinishReq
     */
    'isNewDevice': boolean;
}


/**
 * tbd.
 * @export
 * @interface IdentifierVerifyStartReq
 */
export interface IdentifierVerifyStartReq {
    /**
     * 
     * @type {LoginIdentifierType}
     * @memberof IdentifierVerifyStartReq
     */
    'identifierType': LoginIdentifierType;
    /**
     * 
     * @type {VerificationMethod}
     * @memberof IdentifierVerifyStartReq
     */
    'verificationType': VerificationMethod;
}


/**
 * 
 * @export
 * @interface LoginIdentifier
 */
export interface LoginIdentifier {
    /**
     * 
     * @type {LoginIdentifierType}
     * @memberof LoginIdentifier
     */
    'type': LoginIdentifierType;
    /**
     * 
     * @type {string}
     * @memberof LoginIdentifier
     */
    'identifier': string;
}


/**
 * 
 * @export
 * @interface LoginIdentifierConfig
 */
export interface LoginIdentifierConfig {
    /**
     * 
     * @type {LoginIdentifierType1}
     * @memberof LoginIdentifierConfig
     */
    'type': LoginIdentifierType1;
    /**
     * 
     * @type {string}
     * @memberof LoginIdentifierConfig
     */
    'enforceVerification': LoginIdentifierConfigEnforceVerificationEnum;
    /**
     * 
     * @type {boolean}
     * @memberof LoginIdentifierConfig
     */
    'useAsLoginIdentifier': boolean;
    /**
     * 
     * @type {object}
     * @memberof LoginIdentifierConfig
     */
    'metadata'?: object;
}

export const LoginIdentifierConfigEnforceVerificationEnum = {
    None: 'none',
    Signup: 'signup',
    BeforePasskeyLogin: 'before-passkey-login'
} as const;

export type LoginIdentifierConfigEnforceVerificationEnum = typeof LoginIdentifierConfigEnforceVerificationEnum[keyof typeof LoginIdentifierConfigEnforceVerificationEnum];

/**
 * 
 * @export
 * @enum {string}
 */

export const LoginIdentifierType = {
    Email: 'email',
    Phone: 'phone',
    Username: 'username'
} as const;

export type LoginIdentifierType = typeof LoginIdentifierType[keyof typeof LoginIdentifierType];


/**
 * Login Identifier type
 * @export
 * @enum {string}
 */

export const LoginIdentifierType1 = {
    Email: 'email',
    PhoneNumber: 'phone_number',
    Custom: 'custom'
} as const;

export type LoginIdentifierType1 = typeof LoginIdentifierType1[keyof typeof LoginIdentifierType1];


/**
 * 
 * @export
 * @interface LoginIdentifierWithError
 */
export interface LoginIdentifierWithError {
    /**
     * 
     * @type {LoginIdentifierType}
     * @memberof LoginIdentifierWithError
     */
    'type': LoginIdentifierType;
    /**
     * 
     * @type {string}
     * @memberof LoginIdentifierWithError
     */
    'identifier': string;
    /**
     * 
     * @type {RequestError}
     * @memberof LoginIdentifierWithError
     */
    'error'?: RequestError;
}


/**
 * tbd.
 * @export
 * @interface LoginInitReq
 */
export interface LoginInitReq {
    /**
     * 
     * @type {string}
     * @memberof LoginInitReq
     */
    'identifierValue': string;
    /**
     * 
     * @type {boolean}
     * @memberof LoginInitReq
     */
    'isPhone': boolean;
}
/**
 * 
 * @export
 * @interface MePasskeyDeleteRsp
 */
export interface MePasskeyDeleteRsp {
    /**
     * 
     * @type {string}
     * @memberof MePasskeyDeleteRsp
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface MePasskeyRsp
 */
export interface MePasskeyRsp {
    /**
     * 
     * @type {Array<Passkey>}
     * @memberof MePasskeyRsp
     */
    'passkeys': Array<Passkey>;
    /**
     * 
     * @type {Paging}
     * @memberof MePasskeyRsp
     */
    'paging': Paging;
}
/**
 * 
 * @export
 * @interface MePasskeysAppendFinishReq
 */
export interface MePasskeysAppendFinishReq {
    /**
     * 
     * @type {string}
     * @memberof MePasskeysAppendFinishReq
     */
    'attestationResponse': string;
    /**
     * 
     * @type {ClientInformation}
     * @memberof MePasskeysAppendFinishReq
     */
    'clientInformation': ClientInformation;
}
/**
 * 
 * @export
 * @interface MePasskeysAppendStartReq
 */
export interface MePasskeysAppendStartReq {
    /**
     * 
     * @type {ClientInformation}
     * @memberof MePasskeysAppendStartReq
     */
    'clientInformation': ClientInformation;
}
/**
 * 
 * @export
 * @interface MePasskeysAppendStartRsp
 */
export interface MePasskeysAppendStartRsp {
    /**
     * 
     * @type {string}
     * @memberof MePasskeysAppendStartRsp
     */
    'newClientEnvHandle'?: string;
    /**
     * 
     * @type {string}
     * @memberof MePasskeysAppendStartRsp
     */
    'appendNotAllowedReason'?: MePasskeysAppendStartRspAppendNotAllowedReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof MePasskeysAppendStartRsp
     */
    'attestationOptions': string;
}

export const MePasskeysAppendStartRspAppendNotAllowedReasonEnum = {
    PasskeyAlreadyExists: 'passkey_already_exists',
    PasskeysNotSupported: 'passkeys_not_supported'
} as const;

export type MePasskeysAppendStartRspAppendNotAllowedReasonEnum = typeof MePasskeysAppendStartRspAppendNotAllowedReasonEnum[keyof typeof MePasskeysAppendStartRspAppendNotAllowedReasonEnum];

/**
 * 
 * @export
 * @interface MeRefreshRsp
 */
export interface MeRefreshRsp {
    /**
     * 
     * @type {string}
     * @memberof MeRefreshRsp
     */
    'shortSession': string;
}
/**
 * 
 * @export
 * @interface MeRsp
 */
export interface MeRsp {
    /**
     * 
     * @type {string}
     * @memberof MeRsp
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof MeRsp
     */
    'fullName': string;
    /**
     * 
     * @type {Array<Identifier>}
     * @memberof MeRsp
     */
    'identifiers': Array<Identifier>;
}
/**
 * 
 * @export
 * @interface Paging
 */
export interface Paging {
    /**
     * current page returned in response
     * @type {number}
     * @memberof Paging
     */
    'page': number;
    /**
     * total number of pages available
     * @type {number}
     * @memberof Paging
     */
    'totalPages': number;
    /**
     * total number of items available
     * @type {number}
     * @memberof Paging
     */
    'totalItems': number;
}
/**
 * 
 * @export
 * @interface Passkey
 */
export interface Passkey {
    /**
     * 
     * @type {string}
     * @memberof Passkey
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Passkey
     */
    'credentialID': string;
    /**
     * 
     * @type {string}
     * @memberof Passkey
     */
    'attestationType': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Passkey
     */
    'transport': Array<PasskeyTransportEnum>;
    /**
     * 
     * @type {boolean}
     * @memberof Passkey
     */
    'backupEligible': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Passkey
     */
    'backupState': boolean;
    /**
     * 
     * @type {string}
     * @memberof Passkey
     */
    'authenticatorAAGUID': string;
    /**
     * 
     * @type {string}
     * @memberof Passkey
     */
    'sourceOS': string;
    /**
     * 
     * @type {string}
     * @memberof Passkey
     */
    'sourceBrowser': string;
    /**
     * Timestamp of when the passkey was last used in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof Passkey
     */
    'lastUsed': string;
    /**
     * Timestamp of when the entity was created in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof Passkey
     */
    'created': string;
    /**
     * Status
     * @type {string}
     * @memberof Passkey
     */
    'status': PasskeyStatusEnum;
}

export const PasskeyTransportEnum = {
    Usb: 'usb',
    Nfc: 'nfc',
    Ble: 'ble',
    Internal: 'internal',
    Hybrid: 'hybrid',
    SmartCard: 'smart-card'
} as const;

export type PasskeyTransportEnum = typeof PasskeyTransportEnum[keyof typeof PasskeyTransportEnum];
export const PasskeyStatusEnum = {
    Pending: 'pending',
    Active: 'active'
} as const;

export type PasskeyStatusEnum = typeof PasskeyStatusEnum[keyof typeof PasskeyStatusEnum];

/**
 * tbd.
 * @export
 * @interface PasskeyAppendFinishReq
 */
export interface PasskeyAppendFinishReq {
    /**
     * 
     * @type {string}
     * @memberof PasskeyAppendFinishReq
     */
    'signedChallenge': string;
}
/**
 * tbd.
 * @export
 * @interface PasskeyLoginFinishReq
 */
export interface PasskeyLoginFinishReq {
    /**
     * 
     * @type {string}
     * @memberof PasskeyLoginFinishReq
     */
    'signedChallenge': string;
}
/**
 * tbd.
 * @export
 * @interface PasskeyMediationFinishReq
 */
export interface PasskeyMediationFinishReq {
    /**
     * 
     * @type {string}
     * @memberof PasskeyMediationFinishReq
     */
    'signedChallenge': string;
}
/**
 * 
 * @export
 * @interface PhoneCollectReq
 */
export interface PhoneCollectReq {
    /**
     * 
     * @type {string}
     * @memberof PhoneCollectReq
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface ProcessCommon
 */
export interface ProcessCommon {
    /**
     * 
     * @type {string}
     * @memberof ProcessCommon
     */
    'appName': string;
    /**
     * 
     * @type {string}
     * @memberof ProcessCommon
     */
    'frontendApiUrl': string;
}
/**
 * tbd.
 * @export
 * @interface ProcessInitReq
 */
export interface ProcessInitReq {
    /**
     * 
     * @type {ClientInformation}
     * @memberof ProcessInitReq
     */
    'clientInformation': ClientInformation;
    /**
     * 
     * @type {number}
     * @memberof ProcessInitReq
     */
    'passkeyAppendShown'?: number;
    /**
     * 
     * @type {BlockType}
     * @memberof ProcessInitReq
     */
    'preferredBlock'?: BlockType;
}


/**
 * tbd.
 * @export
 * @interface ProcessInitRsp
 */
export interface ProcessInitRsp {
    /**
     * 
     * @type {string}
     * @memberof ProcessInitRsp
     */
    'newClientEnvHandle'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessInitRsp
     */
    'token': string;
    /**
     * 
     * @type {number}
     * @memberof ProcessInitRsp
     */
    'expiresAt': number;
    /**
     * 
     * @type {ProcessResponse}
     * @memberof ProcessInitRsp
     */
    'processResponse': ProcessResponse;
}
/**
 * 
 * @export
 * @interface ProcessResponse
 */
export interface ProcessResponse {
    /**
     * 
     * @type {BlockBody}
     * @memberof ProcessResponse
     */
    'blockBody': BlockBody;
    /**
     * 
     * @type {ProcessCommon}
     * @memberof ProcessResponse
     */
    'common': ProcessCommon;
}
/**
 * 
 * @export
 * @interface RequestError
 */
export interface RequestError {
    /**
     * 
     * @type {string}
     * @memberof RequestError
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof RequestError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface SessionConfigRsp
 */
export interface SessionConfigRsp {
    /**
     * 
     * @type {boolean}
     * @memberof SessionConfigRsp
     */
    'useSessionManagement': boolean;
    /**
     * 
     * @type {ShortSessionCookieConfig}
     * @memberof SessionConfigRsp
     */
    'shortSessionCookieConfig'?: ShortSessionCookieConfig;
    /**
     * 
     * @type {string}
     * @memberof SessionConfigRsp
     */
    'frontendApiUrl'?: string;
}
/**
 * 
 * @export
 * @interface ShortSessionCookieConfig
 */
export interface ShortSessionCookieConfig {
    /**
     * 
     * @type {string}
     * @memberof ShortSessionCookieConfig
     */
    'domain': string;
    /**
     * 
     * @type {boolean}
     * @memberof ShortSessionCookieConfig
     */
    'secure': boolean;
    /**
     * 
     * @type {string}
     * @memberof ShortSessionCookieConfig
     */
    'sameSite': ShortSessionCookieConfigSameSiteEnum;
    /**
     * 
     * @type {string}
     * @memberof ShortSessionCookieConfig
     */
    'path': string;
    /**
     * 
     * @type {number}
     * @memberof ShortSessionCookieConfig
     */
    'lifetimeSeconds': number;
}

export const ShortSessionCookieConfigSameSiteEnum = {
    Lax: 'lax',
    Strict: 'strict',
    None: 'none'
} as const;

export type ShortSessionCookieConfigSameSiteEnum = typeof ShortSessionCookieConfigSameSiteEnum[keyof typeof ShortSessionCookieConfigSameSiteEnum];

/**
 * tbd.
 * @export
 * @interface SignupInitReq
 */
export interface SignupInitReq {
    /**
     * 
     * @type {string}
     * @memberof SignupInitReq
     */
    'fullName'?: string;
    /**
     * 
     * @type {Array<LoginIdentifier>}
     * @memberof SignupInitReq
     */
    'identifiers': Array<LoginIdentifier>;
}
/**
 * 
 * @export
 * @interface SocialVerifyStartReq
 */
export interface SocialVerifyStartReq {
    /**
     * 
     * @type {string}
     * @memberof SocialVerifyStartReq
     */
    'placeholder'?: string;
}
/**
 * tbd.
 * @export
 * @interface UpdateComponentConfigReq
 */
export interface UpdateComponentConfigReq {
    /**
     * 
     * @type {string}
     * @memberof UpdateComponentConfigReq
     */
    'appName': string;
    /**
     * 
     * @type {Array<LoginIdentifierConfig>}
     * @memberof UpdateComponentConfigReq
     */
    'identifiers': Array<LoginIdentifierConfig>;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateComponentConfigReq
     */
    'publicSignupEnabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateComponentConfigReq
     */
    'fullNameRequired': boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateComponentConfigReq
     */
    'passkeyAppendInterval': UpdateComponentConfigReqPasskeyAppendIntervalEnum;
}

export const UpdateComponentConfigReqPasskeyAppendIntervalEnum = {
    NotSpecified: 'not_specified',
    _0d: '0d',
    _1d: '1d',
    _3d: '3d',
    _1w: '1w',
    _3w: '3w',
    _1m: '1m',
    _3m: '3m'
} as const;

export type UpdateComponentConfigReqPasskeyAppendIntervalEnum = typeof UpdateComponentConfigReqPasskeyAppendIntervalEnum[keyof typeof UpdateComponentConfigReqPasskeyAppendIntervalEnum];

/**
 * 
 * @export
 * @interface UpdateComponentConfigRsp
 */
export interface UpdateComponentConfigRsp {
    /**
     * 
     * @type {boolean}
     * @memberof UpdateComponentConfigRsp
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface UsernameCollectReq
 */
export interface UsernameCollectReq {
    /**
     * 
     * @type {string}
     * @memberof UsernameCollectReq
     */
    'value': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const VerificationMethod = {
    EmailLink: 'email-link',
    EmailOtp: 'email-otp',
    PhoneOtp: 'phone-otp'
} as const;

export type VerificationMethod = typeof VerificationMethod[keyof typeof VerificationMethod];



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockSkip: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/auth/block/skip`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {IdentifierUpdateReq} identifierUpdateReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identifierUpdate: async (identifierUpdateReq: IdentifierUpdateReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifierUpdateReq' is not null or undefined
            assertParamExists('identifierUpdate', 'identifierUpdateReq', identifierUpdateReq)
            const localVarPath = `/v2/auth/identifier/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(identifierUpdateReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {IdentifierVerifyFinishReq} identifierVerifyFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identifierVerifyFinish: async (identifierVerifyFinishReq: IdentifierVerifyFinishReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifierVerifyFinishReq' is not null or undefined
            assertParamExists('identifierVerifyFinish', 'identifierVerifyFinishReq', identifierVerifyFinishReq)
            const localVarPath = `/v2/auth/identifier/verify/finish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(identifierVerifyFinishReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {IdentifierVerifyStartReq} identifierVerifyStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identifierVerifyStart: async (identifierVerifyStartReq: IdentifierVerifyStartReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifierVerifyStartReq' is not null or undefined
            assertParamExists('identifierVerifyStart', 'identifierVerifyStartReq', identifierVerifyStartReq)
            const localVarPath = `/v2/auth/identifier/verify/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(identifierVerifyStartReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identifierVerifyStatus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/auth/identifier/verify/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {LoginInitReq} loginInitReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginInit: async (loginInitReq: LoginInitReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginInitReq' is not null or undefined
            assertParamExists('loginInit', 'loginInitReq', loginInitReq)
            const localVarPath = `/v2/auth/login/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginInitReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {PasskeyAppendFinishReq} passkeyAppendFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passkeyAppendFinish: async (passkeyAppendFinishReq: PasskeyAppendFinishReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passkeyAppendFinishReq' is not null or undefined
            assertParamExists('passkeyAppendFinish', 'passkeyAppendFinishReq', passkeyAppendFinishReq)
            const localVarPath = `/v2/auth/passkey/append/finish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passkeyAppendFinishReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passkeyAppendStart: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('passkeyAppendStart', 'body', body)
            const localVarPath = `/v2/auth/passkey/append/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {PasskeyLoginFinishReq} passkeyLoginFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passkeyLoginFinish: async (passkeyLoginFinishReq: PasskeyLoginFinishReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passkeyLoginFinishReq' is not null or undefined
            assertParamExists('passkeyLoginFinish', 'passkeyLoginFinishReq', passkeyLoginFinishReq)
            const localVarPath = `/v2/auth/passkey/login/finish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passkeyLoginFinishReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passkeyLoginStart: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('passkeyLoginStart', 'body', body)
            const localVarPath = `/v2/auth/passkey/login/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {PasskeyMediationFinishReq} passkeyMediationFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passkeyMediationFinish: async (passkeyMediationFinishReq: PasskeyMediationFinishReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passkeyMediationFinishReq' is not null or undefined
            assertParamExists('passkeyMediationFinish', 'passkeyMediationFinishReq', passkeyMediationFinishReq)
            const localVarPath = `/v2/auth/passkey/mediation/finish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passkeyMediationFinishReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {PhoneCollectReq} phoneCollectReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneCollect: async (phoneCollectReq: PhoneCollectReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneCollectReq' is not null or undefined
            assertParamExists('phoneCollect', 'phoneCollectReq', phoneCollectReq)
            const localVarPath = `/v2/auth/phone/collect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phoneCollectReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processComplete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/auth/process/complete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {BlockType} [preferredBlock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processGet: async (preferredBlock?: BlockType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/auth/process`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)

            if (preferredBlock !== undefined) {
                localVarQueryParameter['preferredBlock'] = preferredBlock;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {ProcessInitReq} processInitReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processInit: async (processInitReq: ProcessInitReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processInitReq' is not null or undefined
            assertParamExists('processInit', 'processInitReq', processInitReq)
            const localVarPath = `/v2/auth/process/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processInitReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processReset: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/auth/process/reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {SignupInitReq} signupInitReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupInit: async (signupInitReq: SignupInitReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signupInitReq' is not null or undefined
            assertParamExists('signupInit', 'signupInitReq', signupInitReq)
            const localVarPath = `/v2/auth/signup/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signupInitReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialVerifyFinish: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/auth/social/verify/finish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {SocialVerifyStartReq} socialVerifyStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialVerifyStart: async (socialVerifyStartReq: SocialVerifyStartReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'socialVerifyStartReq' is not null or undefined
            assertParamExists('socialVerifyStart', 'socialVerifyStartReq', socialVerifyStartReq)
            const localVarPath = `/v2/auth/social/verify/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(socialVerifyStartReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {UsernameCollectReq} usernameCollectReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usernameCollect: async (usernameCollectReq: UsernameCollectReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usernameCollectReq' is not null or undefined
            assertParamExists('usernameCollect', 'usernameCollectReq', usernameCollectReq)
            const localVarPath = `/v2/auth/username/collect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usernameCollectReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blockSkip(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blockSkip(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {IdentifierUpdateReq} identifierUpdateReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identifierUpdate(identifierUpdateReq: IdentifierUpdateReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identifierUpdate(identifierUpdateReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {IdentifierVerifyFinishReq} identifierVerifyFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identifierVerifyFinish(identifierVerifyFinishReq: IdentifierVerifyFinishReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identifierVerifyFinish(identifierVerifyFinishReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {IdentifierVerifyStartReq} identifierVerifyStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identifierVerifyStart(identifierVerifyStartReq: IdentifierVerifyStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identifierVerifyStart(identifierVerifyStartReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identifierVerifyStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identifierVerifyStatus(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {LoginInitReq} loginInitReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginInit(loginInitReq: LoginInitReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginInit(loginInitReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {PasskeyAppendFinishReq} passkeyAppendFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passkeyAppendFinish(passkeyAppendFinishReq: PasskeyAppendFinishReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passkeyAppendFinish(passkeyAppendFinishReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passkeyAppendStart(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passkeyAppendStart(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {PasskeyLoginFinishReq} passkeyLoginFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passkeyLoginFinish(passkeyLoginFinishReq: PasskeyLoginFinishReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passkeyLoginFinish(passkeyLoginFinishReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passkeyLoginStart(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passkeyLoginStart(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {PasskeyMediationFinishReq} passkeyMediationFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passkeyMediationFinish(passkeyMediationFinishReq: PasskeyMediationFinishReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passkeyMediationFinish(passkeyMediationFinishReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {PhoneCollectReq} phoneCollectReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phoneCollect(phoneCollectReq: PhoneCollectReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phoneCollect(phoneCollectReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processComplete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processComplete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {BlockType} [preferredBlock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processGet(preferredBlock?: BlockType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processGet(preferredBlock, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {ProcessInitReq} processInitReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processInit(processInitReq: ProcessInitReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessInitRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processInit(processInitReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processReset(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processReset(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {SignupInitReq} signupInitReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signupInit(signupInitReq: SignupInitReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signupInit(signupInitReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async socialVerifyFinish(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.socialVerifyFinish(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {SocialVerifyStartReq} socialVerifyStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async socialVerifyStart(socialVerifyStartReq: SocialVerifyStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.socialVerifyStart(socialVerifyStartReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {UsernameCollectReq} usernameCollectReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usernameCollect(usernameCollectReq: UsernameCollectReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usernameCollect(usernameCollectReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockSkip(options?: any): AxiosPromise<ProcessResponse> {
            return localVarFp.blockSkip(options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {IdentifierUpdateReq} identifierUpdateReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identifierUpdate(identifierUpdateReq: IdentifierUpdateReq, options?: any): AxiosPromise<ProcessResponse> {
            return localVarFp.identifierUpdate(identifierUpdateReq, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {IdentifierVerifyFinishReq} identifierVerifyFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identifierVerifyFinish(identifierVerifyFinishReq: IdentifierVerifyFinishReq, options?: any): AxiosPromise<ProcessResponse> {
            return localVarFp.identifierVerifyFinish(identifierVerifyFinishReq, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {IdentifierVerifyStartReq} identifierVerifyStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identifierVerifyStart(identifierVerifyStartReq: IdentifierVerifyStartReq, options?: any): AxiosPromise<ProcessResponse> {
            return localVarFp.identifierVerifyStart(identifierVerifyStartReq, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identifierVerifyStatus(options?: any): AxiosPromise<ProcessResponse> {
            return localVarFp.identifierVerifyStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {LoginInitReq} loginInitReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginInit(loginInitReq: LoginInitReq, options?: any): AxiosPromise<ProcessResponse> {
            return localVarFp.loginInit(loginInitReq, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {PasskeyAppendFinishReq} passkeyAppendFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passkeyAppendFinish(passkeyAppendFinishReq: PasskeyAppendFinishReq, options?: any): AxiosPromise<ProcessResponse> {
            return localVarFp.passkeyAppendFinish(passkeyAppendFinishReq, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passkeyAppendStart(body: object, options?: any): AxiosPromise<ProcessResponse> {
            return localVarFp.passkeyAppendStart(body, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {PasskeyLoginFinishReq} passkeyLoginFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passkeyLoginFinish(passkeyLoginFinishReq: PasskeyLoginFinishReq, options?: any): AxiosPromise<ProcessResponse> {
            return localVarFp.passkeyLoginFinish(passkeyLoginFinishReq, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passkeyLoginStart(body: object, options?: any): AxiosPromise<ProcessResponse> {
            return localVarFp.passkeyLoginStart(body, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {PasskeyMediationFinishReq} passkeyMediationFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passkeyMediationFinish(passkeyMediationFinishReq: PasskeyMediationFinishReq, options?: any): AxiosPromise<ProcessResponse> {
            return localVarFp.passkeyMediationFinish(passkeyMediationFinishReq, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {PhoneCollectReq} phoneCollectReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneCollect(phoneCollectReq: PhoneCollectReq, options?: any): AxiosPromise<ProcessResponse> {
            return localVarFp.phoneCollect(phoneCollectReq, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processComplete(options?: any): AxiosPromise<ProcessResponse> {
            return localVarFp.processComplete(options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {BlockType} [preferredBlock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processGet(preferredBlock?: BlockType, options?: any): AxiosPromise<ProcessResponse> {
            return localVarFp.processGet(preferredBlock, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {ProcessInitReq} processInitReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processInit(processInitReq: ProcessInitReq, options?: any): AxiosPromise<ProcessInitRsp> {
            return localVarFp.processInit(processInitReq, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processReset(options?: any): AxiosPromise<ProcessResponse> {
            return localVarFp.processReset(options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {SignupInitReq} signupInitReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupInit(signupInitReq: SignupInitReq, options?: any): AxiosPromise<ProcessResponse> {
            return localVarFp.signupInit(signupInitReq, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialVerifyFinish(options?: any): AxiosPromise<ProcessResponse> {
            return localVarFp.socialVerifyFinish(options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {SocialVerifyStartReq} socialVerifyStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialVerifyStart(socialVerifyStartReq: SocialVerifyStartReq, options?: any): AxiosPromise<ProcessResponse> {
            return localVarFp.socialVerifyStart(socialVerifyStartReq, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {UsernameCollectReq} usernameCollectReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usernameCollect(usernameCollectReq: UsernameCollectReq, options?: any): AxiosPromise<ProcessResponse> {
            return localVarFp.usernameCollect(usernameCollectReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public blockSkip(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).blockSkip(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {IdentifierUpdateReq} identifierUpdateReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public identifierUpdate(identifierUpdateReq: IdentifierUpdateReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).identifierUpdate(identifierUpdateReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {IdentifierVerifyFinishReq} identifierVerifyFinishReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public identifierVerifyFinish(identifierVerifyFinishReq: IdentifierVerifyFinishReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).identifierVerifyFinish(identifierVerifyFinishReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {IdentifierVerifyStartReq} identifierVerifyStartReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public identifierVerifyStart(identifierVerifyStartReq: IdentifierVerifyStartReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).identifierVerifyStart(identifierVerifyStartReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public identifierVerifyStatus(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).identifierVerifyStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {LoginInitReq} loginInitReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginInit(loginInitReq: LoginInitReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).loginInit(loginInitReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {PasskeyAppendFinishReq} passkeyAppendFinishReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public passkeyAppendFinish(passkeyAppendFinishReq: PasskeyAppendFinishReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).passkeyAppendFinish(passkeyAppendFinishReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public passkeyAppendStart(body: object, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).passkeyAppendStart(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {PasskeyLoginFinishReq} passkeyLoginFinishReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public passkeyLoginFinish(passkeyLoginFinishReq: PasskeyLoginFinishReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).passkeyLoginFinish(passkeyLoginFinishReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public passkeyLoginStart(body: object, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).passkeyLoginStart(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {PasskeyMediationFinishReq} passkeyMediationFinishReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public passkeyMediationFinish(passkeyMediationFinishReq: PasskeyMediationFinishReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).passkeyMediationFinish(passkeyMediationFinishReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {PhoneCollectReq} phoneCollectReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public phoneCollect(phoneCollectReq: PhoneCollectReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).phoneCollect(phoneCollectReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public processComplete(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).processComplete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {BlockType} [preferredBlock] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public processGet(preferredBlock?: BlockType, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).processGet(preferredBlock, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {ProcessInitReq} processInitReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public processInit(processInitReq: ProcessInitReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).processInit(processInitReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public processReset(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).processReset(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {SignupInitReq} signupInitReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public signupInit(signupInitReq: SignupInitReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).signupInit(signupInitReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public socialVerifyFinish(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).socialVerifyFinish(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {SocialVerifyStartReq} socialVerifyStartReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public socialVerifyStart(socialVerifyStartReq: SocialVerifyStartReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).socialVerifyStart(socialVerifyStartReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {UsernameCollectReq} usernameCollectReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public usernameCollect(usernameCollectReq: UsernameCollectReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).usernameCollect(usernameCollectReq, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ConfigsApi - axios parameter creator
 * @export
 */
export const ConfigsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionConfig: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/session-config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {UpdateComponentConfigReq} updateComponentConfigReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComponentConfig: async (updateComponentConfigReq: UpdateComponentConfigReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateComponentConfigReq' is not null or undefined
            assertParamExists('updateComponentConfig', 'updateComponentConfigReq', updateComponentConfigReq)
            const localVarPath = `/v2/component-config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateComponentConfigReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigsApi - functional programming interface
 * @export
 */
export const ConfigsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigsApiAxiosParamCreator(configuration)
    return {
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSessionConfig(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionConfigRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionConfig(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {UpdateComponentConfigReq} updateComponentConfigReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateComponentConfig(updateComponentConfigReq: UpdateComponentConfigReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateComponentConfigRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateComponentConfig(updateComponentConfigReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConfigsApi - factory interface
 * @export
 */
export const ConfigsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigsApiFp(configuration)
    return {
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionConfig(options?: any): AxiosPromise<SessionConfigRsp> {
            return localVarFp.getSessionConfig(options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {UpdateComponentConfigReq} updateComponentConfigReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComponentConfig(updateComponentConfigReq: UpdateComponentConfigReq, options?: any): AxiosPromise<UpdateComponentConfigRsp> {
            return localVarFp.updateComponentConfig(updateComponentConfigReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigsApi - object-oriented interface
 * @export
 * @class ConfigsApi
 * @extends {BaseAPI}
 */
export class ConfigsApi extends BaseAPI {
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigsApi
     */
    public getSessionConfig(options?: AxiosRequestConfig) {
        return ConfigsApiFp(this.configuration).getSessionConfig(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {UpdateComponentConfigReq} updateComponentConfigReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigsApi
     */
    public updateComponentConfig(updateComponentConfigReq: UpdateComponentConfigReq, options?: AxiosRequestConfig) {
        return ConfigsApiFp(this.configuration).updateComponentConfig(updateComponentConfigReq, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finishes passkey append for current user
         * @param {MePasskeysAppendFinishReq} mePasskeysAppendFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserPasskeyAppendFinish: async (mePasskeysAppendFinishReq: MePasskeysAppendFinishReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mePasskeysAppendFinishReq' is not null or undefined
            assertParamExists('currentUserPasskeyAppendFinish', 'mePasskeysAppendFinishReq', mePasskeysAppendFinishReq)
            const localVarPath = `/v2/me/passkeys/append/finish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mePasskeysAppendFinishReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts passkey append for current user
         * @param {MePasskeysAppendStartReq} mePasskeysAppendStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserPasskeyAppendStart: async (mePasskeysAppendStartReq: MePasskeysAppendStartReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mePasskeysAppendStartReq' is not null or undefined
            assertParamExists('currentUserPasskeyAppendStart', 'mePasskeysAppendStartReq', mePasskeysAppendStartReq)
            const localVarPath = `/v2/me/passkeys/append/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mePasskeysAppendStartReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete current user\'s passkeys
         * @param {string} credentialID Credential ID from passkeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserPasskeyDelete: async (credentialID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'credentialID' is not null or undefined
            assertParamExists('currentUserPasskeyDelete', 'credentialID', credentialID)
            const localVarPath = `/v2/me/passkeys/{credentialID}`
                .replace(`{${"credentialID"}}`, encodeURIComponent(String(credentialID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets current user\'s passkeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserPasskeyGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/me/passkeys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs session logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserSessionLogout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/me/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs session refresh
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserSessionRefresh: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/me/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentUserGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currentUserGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Finishes passkey append for current user
         * @param {MePasskeysAppendFinishReq} mePasskeysAppendFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentUserPasskeyAppendFinish(mePasskeysAppendFinishReq: MePasskeysAppendFinishReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currentUserPasskeyAppendFinish(mePasskeysAppendFinishReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Starts passkey append for current user
         * @param {MePasskeysAppendStartReq} mePasskeysAppendStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentUserPasskeyAppendStart(mePasskeysAppendStartReq: MePasskeysAppendStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MePasskeysAppendStartRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currentUserPasskeyAppendStart(mePasskeysAppendStartReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete current user\'s passkeys
         * @param {string} credentialID Credential ID from passkeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentUserPasskeyDelete(credentialID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MePasskeyDeleteRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currentUserPasskeyDelete(credentialID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets current user\'s passkeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentUserPasskeyGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MePasskeyRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currentUserPasskeyGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs session logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentUserSessionLogout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currentUserSessionLogout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs session refresh
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentUserSessionRefresh(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeRefreshRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currentUserSessionRefresh(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Gets current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserGet(options?: any): AxiosPromise<MeRsp> {
            return localVarFp.currentUserGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Finishes passkey append for current user
         * @param {MePasskeysAppendFinishReq} mePasskeysAppendFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserPasskeyAppendFinish(mePasskeysAppendFinishReq: MePasskeysAppendFinishReq, options?: any): AxiosPromise<void> {
            return localVarFp.currentUserPasskeyAppendFinish(mePasskeysAppendFinishReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Starts passkey append for current user
         * @param {MePasskeysAppendStartReq} mePasskeysAppendStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserPasskeyAppendStart(mePasskeysAppendStartReq: MePasskeysAppendStartReq, options?: any): AxiosPromise<MePasskeysAppendStartRsp> {
            return localVarFp.currentUserPasskeyAppendStart(mePasskeysAppendStartReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete current user\'s passkeys
         * @param {string} credentialID Credential ID from passkeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserPasskeyDelete(credentialID: string, options?: any): AxiosPromise<MePasskeyDeleteRsp> {
            return localVarFp.currentUserPasskeyDelete(credentialID, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets current user\'s passkeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserPasskeyGet(options?: any): AxiosPromise<MePasskeyRsp> {
            return localVarFp.currentUserPasskeyGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Performs session logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserSessionLogout(options?: any): AxiosPromise<void> {
            return localVarFp.currentUserSessionLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * Performs session refresh
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserSessionRefresh(options?: any): AxiosPromise<MeRefreshRsp> {
            return localVarFp.currentUserSessionRefresh(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Gets current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public currentUserGet(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).currentUserGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finishes passkey append for current user
     * @param {MePasskeysAppendFinishReq} mePasskeysAppendFinishReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public currentUserPasskeyAppendFinish(mePasskeysAppendFinishReq: MePasskeysAppendFinishReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).currentUserPasskeyAppendFinish(mePasskeysAppendFinishReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Starts passkey append for current user
     * @param {MePasskeysAppendStartReq} mePasskeysAppendStartReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public currentUserPasskeyAppendStart(mePasskeysAppendStartReq: MePasskeysAppendStartReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).currentUserPasskeyAppendStart(mePasskeysAppendStartReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete current user\'s passkeys
     * @param {string} credentialID Credential ID from passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public currentUserPasskeyDelete(credentialID: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).currentUserPasskeyDelete(credentialID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets current user\'s passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public currentUserPasskeyGet(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).currentUserPasskeyGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs session logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public currentUserSessionLogout(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).currentUserSessionLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs session refresh
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public currentUserSessionRefresh(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).currentUserSessionRefresh(options).then((request) => request(this.axios, this.basePath));
    }
}



