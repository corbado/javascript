import type { SessionUser } from '@corbado/types';
import type { RecoverableError } from '@corbado/web-core';

import type { FlowHandlerEvents, LoginFlowNames, SignUpFlowNames } from './constants';
import type { ScreenNames } from './constants';
import type { FlowHandlerState } from './flowHandlerState';
import type { FlowUpdate } from './flowUpdate';

/**
 * Configuration options for the passkey sign-up with email OTP fallback flow.
 */
export interface SignupOptions {
  passkeyAppend: boolean;
  retryPasskeyOnError: boolean;
  verificationMethod: 'emailLink' | 'emailOtp' | 'smsOtp';
}

/**
 * Configuration options for the passkey login with email OTP fallback flow.
 */
export interface LoginOptions {
  passkeyAppend: boolean;
  retryPasskeyOnError: boolean;
  verificationMethod: 'emailLink' | 'emailOtp' | 'smsOtp';
}

/**
 * Configuration options for the authentication flows.
 */
export type FlowOptions = SignupOptions | LoginOptions;

/**
 * Union type of all possible flow names for sign-up and login processes.
 */
export type FlowNames = SignUpFlowNames | LoginFlowNames;

/**
 * Type definition for a function that represents a step in an authentication flow.
 */
export interface FlowHandlerEventOptions {
  userHasPasskey?: boolean;
  userStateUpdate?: UserState;
  verificationCode?: string;
}

/**
 * Type definition for a function that represents a step in an authentication flow.
 */
export type StepFunction = (
  state: FlowHandlerState,
  event?: FlowHandlerEvents,
  eventOptions?: FlowHandlerEventOptions,
) => Promise<FlowUpdate | undefined>;

/**
 * Type representing a dictionary of step functions for each screen in a flow.
 */
export type Flow = {
  [K in ScreenNames]?: StepFunction;
};

/**
 * Type representing a dictionary of flows for each flow name.
 */
export type Flows = Record<FlowNames, Flow>;

/**
 * All state that can be generated by the user within the CorabdoAuth component.
 * This state is used internally by the flowHandler to determine the next step in the authentication flow and to
 * update the UI accordingly.
 */
export type UserState = {
  email?: string;
  fullName?: string;
  emailError?: RecoverableError;
  userNameError?: RecoverableError;
  emailOTPError?: RecoverableError;
};

/**
 * Dynamic part of FLowHandlerState that can be updated.
 */
export type FlowHandlerStateUpdate = {
  userState?: UserState;
  user?: SessionUser;
  flowOptions?: Partial<FlowOptions>;
};
